# –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
# –ú–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ n –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ n √ó n, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∏–∑ –≤—Å–µ—Ö —á–∏—Å–µ–ª 1, 2, 3, ‚Ä¶, n**2 —Ç–∞–∫, —á—Ç–æ —Å—É–º–º—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É, –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –∫–∞–∂–¥–æ–π –∏–∑ –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π —Ä–∞–≤–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã: n —Å—Ç—Ä–æ–∫, –ø–æ n —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º, –∏–ª–∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# 3
# 8 1 6
# 3 5 7
# 4 9 2
# Sample Output 1:
# YES

# Sample Input 2:
# 3
# 8 2 6
# 3 5 7
# 4 9 1
# Sample Output 2:
# NO

# üü¢üü¢üü¢üü¢üü¢   Main     üü¢üü¢üü¢üü¢üü¢

n = int(input())
matrix = []

matrix = [list(map(int, input().split())) for i in range(n)]

flag = 'YES'
etalon = sum(matrix[0])
sum_main_diag, sum_sec_diag = 0, 0
seq = ''.join(str(i) for i in range(1, n**2 + 1))
seq_matrix = []

for i in range(n):
    sum_col, sum_row = 0, 0
    for j in range(n):
        seq_matrix.append(matrix[i][j])
        sum_col += matrix[j][i]
        sum_row += matrix[i][j]
    
    if sum_col != etalon or sum_row != etalon:
        flag = 'NO'
        break
    
    sum_main_diag += matrix[i][i]
    sum_sec_diag += matrix[-i - 1][-i - 1]
seq_matrix.sort()

if sum_main_diag != etalon or sum_sec_diag != etalon or seq != ''.join(str(seq_matrix[i]) for i in range(len(seq_matrix))):
    flag = 'NO'

print(flag)





# ü§îü§îü§îü§îü§î    Test    ü§îü§îü§îü§îü§î

n = 6
matrix = [[27, 29, 2, 4, 13, 36],
          [9, 11, 20, 22, 31, 18],
          [32, 25, 7, 3, 21, 23],
          [14, 16, 34, 30, 12, 5],
          [28, 6, 15, 17, 26, 19],
          [1, 24, 33, 35, 10, 8]]

# n = 3
# matrix = [[8, 1, 6],
#           [3, 5, 7],
#           [4, 9, 2]]

# n = 3
# matrix = [[5, 5, 5],
#           [5, 5, 5],
#           [5, 5, 5]]

flag = 'YES'
etalon = sum(matrix[0])
sum_main_diag, sum_sec_diag = 0, 0
seq = ''.join(str(i) for i in range(1, n**2 + 1))
seq_matrix = []

for i in range(n):
    sum_col, sum_row = 0, 0
    for j in range(n):
        seq_matrix.append(matrix[i][j])
        sum_col += matrix[j][i]
        sum_row += matrix[i][j]
    
    if sum_col != etalon or sum_row != etalon:
        flag = 'NO'
        break
    
    sum_main_diag += matrix[i][i]
    sum_sec_diag += matrix[-i - 1][-i - 1]
seq_matrix.sort()

if sum_main_diag != etalon or sum_sec_diag != etalon or seq != ''.join(str(seq_matrix[i]) for i in range(len(seq_matrix))):
    flag = 'NO'

print(flag)
    

